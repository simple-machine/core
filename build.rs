use cbindgen::{Braces, Config, DocumentationStyle, ExportConfig, Language, Style};
use std::env;
use std::path::PathBuf;

const HEADER: &'static str = "/*
RELLO
*/";

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();

    let package_name = env::var("CARGO_PKG_NAME").unwrap();
    let output_file = target_dir()
        .join(format!("{}.h", package_name))
        .display()
        .to_string();

    let config = Config {
        header: Some(HEADER.to_string()),
        braces: Braces::SameLine,
        line_length: 80,
        tab_width: 2,
        language: Language::C,
        cpp_compat: true,
        style: Style::Both,
        autogen_warning: Some(
            "/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */"
                .to_string(),
        ),
        documentation: true,
        documentation_style: DocumentationStyle::C99,
        export: ExportConfig {
            prefix: Some("smov_".to_string()),
            ..Default::default()
        },
        ..Default::default()
    };

    match cbindgen::generate_with_config(&crate_dir, config) {
        Ok(c) => {
            c.write_to_file(&output_file);
        }
        Err(e) => eprintln!("Fatal error: {}", e),
    }
}

/// Find the location of the `target/` directory. Note that this may be
/// overridden by `cmake`, so we also need to check the `CARGO_TARGET_DIR`
/// variable.
fn target_dir() -> PathBuf {
    if let Ok(target) = env::var("CARGO_TARGET_DIR") {
        PathBuf::from(target)
    } else {
        PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join("target")
    }
}
